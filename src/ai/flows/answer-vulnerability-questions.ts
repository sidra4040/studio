// This is an AI-powered chatbot designed to answer questions about vulnerability management using data from DefectDojo and Medtronic GPT.

'use server';
/**
 * @fileOverview A vulnerability management chatbot.
 *
 * - answerVulnerabilityQuestions - A function that answers questions about vulnerability management.
 * - AnswerVulnerabilityQuestionsInput - The input type for the answerVulnerabilityQuestions function.
 * - AnswerVulnerabilityQuestionsOutput - The return type for the answerVulnerabilityQuestions function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const AnswerVulnerabilityQuestionsInputSchema = z.object({
  question: z.string().describe('The question about vulnerability management.'),
});
export type AnswerVulnerabilityQuestionsInput = z.infer<typeof AnswerVulnerabilityQuestionsInputSchema>;

const AnswerVulnerabilityQuestionsOutputSchema = z.object({
  answer: z.string().describe('The answer to the question about vulnerability management.'),
});
export type AnswerVulnerabilityQuestionsOutput = z.infer<typeof AnswerVulnerabilityQuestionsOutputSchema>;

export async function answerVulnerabilityQuestions(input: AnswerVulnerabilityQuestionsInput): Promise<AnswerVulnerabilityQuestionsOutput> {
  return answerVulnerabilityQuestionsFlow(input);
}

const DEFECTDOJO_API_URL = process.env.DEFECTDOJO_API_URL;
const DEFECTDOJO_API_KEY = process.env.DEFECTDOJO_API_KEY;

const MEDTRONIC_GPT_API_URL = process.env.MEDTRONIC_GPT_API_URL;
const MEDTRONIC_GPT_SUBSCRIPTION_KEY = process.env.MEDTRONIC_GPT_SUBSCRIPTION_KEY;
const MEDTRONIC_GPT_API_TOKEN = process.env.MEDTRONIC_GPT_API_TOKEN;

const getDefectDojoData = ai.defineTool({
  name: 'getDefectDojoData',
  description: 'Retrieves vulnerability data from DefectDojo based on the provided query.',
  inputSchema: z.string().describe('A query to retrieve specific data from DefectDojo.'),
  outputSchema: z.any(),
}, async (query) => {
  if (!DEFECTDOJO_API_URL || !DEFECTDOJO_API_KEY) {
    return "Error: DefectDojo API URL or Key is not configured. Please set the DEFECTDOJO_API_URL and DEFECTDOJO_API_KEY environment variables.";
  }
  const DEFECTDOJO_HEADERS = {
    "Authorization": `Token ${DEFECTDOJO_API_KEY}`,
    "Content-Type": "application/json",
    "Accept": "application/json"
  };
  try {
    const response = await fetch(`${DEFECTDOJO_API_URL}api/v2/findings/?${query}`, {
      headers: DEFECTDOJO_HEADERS,
    });

    if (!response.ok) {
        const errorText = await response.text();
        console.error('Error from DefectDojo API:', errorText);
        return `Error fetching data from DefectDojo: HTTP status ${response.status}. ${errorText}`;
    }
    const data = await response.json();
    return JSON.stringify(data);
  } catch (error) {
    console.error('Error fetching data from DefectDojo:', error);
    return `Error fetching data from DefectDojo: ${error instanceof Error ? error.message : String(error)}`;
  }
});

const medtronicGPT = ai.defineTool({
    name: 'medtronicGPT',
    description: 'Answers questions using the Medtronic GPT LLM.',
    inputSchema: z.string().describe('The question to ask Medtronic GPT.'),
    outputSchema: z.string(),
  },
  async (question) => {
    if (!MEDTRONIC_GPT_API_URL || !MEDTRONIC_GPT_SUBSCRIPTION_KEY || !MEDTRONIC_GPT_API_TOKEN) {
      return "Error: Medtronic GPT API credentials are not configured. Please set the MEDTRONIC_GPT_API_URL, MEDTRONIC_GPT_SUBSCRIPTION_KEY, and MEDTRONIC_GPT_API_TOKEN environment variables.";
    }
    try {
      const response = await fetch(MEDTRONIC_GPT_API_URL, {
        method: 'POST',
        headers: {
          'api-version': '3.0',
          'subscription-key': MEDTRONIC_GPT_SUBSCRIPTION_KEY,
          'api-token': MEDTRONIC_GPT_API_TOKEN,
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ prompt: question }),
      });

      if (!response.ok) {
        const errorText = await response.text();
        console.error('Error from Medtronic GPT API:', errorText);
        return `Error calling Medtronic GPT: HTTP status ${response.status}. ${errorText}`;
      }

      const data = await response.json();
      return data.choices[0].text;
    } catch (error) {
      console.error('Error calling Medtronic GPT:', error);
      return `Error calling Medtronic GPT: ${error instanceof Error ? error.message : String(error)}`;
    }
  }
);

const answerVulnerabilityQuestionsPrompt = ai.definePrompt({
  name: 'answerVulnerabilityQuestionsPrompt',
  input: {schema: AnswerVulnerabilityQuestionsInputSchema},
  output: {schema: AnswerVulnerabilityQuestionsOutputSchema},
  tools: [getDefectDojoData, medtronicGPT],
  prompt: `You are a vulnerability management expert. Use the provided tools to answer the following question about vulnerability management:

Question: {{{question}}}

If the question requires data from DefectDojo, use the 'getDefectDojoData' tool to retrieve the necessary information. If the question is general and doesn't require specific data, use the 'medtronicGPT' tool. If a tool returns an error, inform the user about the error in a helpful way.

Answer:`, 
});

const answerVulnerabilityQuestionsFlow = ai.defineFlow(
  {
    name: 'answerVulnerabilityQuestionsFlow',
    inputSchema: AnswerVulnerabilityQuestionsInputSchema,
    outputSchema: AnswerVulnerabilityQuestionsOutputSchema,
  },
  async input => {
    const {output} = await answerVulnerabilityQuestionsPrompt(input);
    return output!;
  }
);
