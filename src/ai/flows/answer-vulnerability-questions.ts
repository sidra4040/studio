// This is an AI-powered chatbot designed to answer questions about vulnerability management using data from DefectDojo and Medtronic GPT.

'use server';
/**
 * @fileOverview A vulnerability management chatbot.
 *
 * - answerVulnerabilityQuestions - A function that answers questions about vulnerability management.
 * - AnswerVulnerabilityQuestionsInput - The input type for the answerVulnerabilityQuestions function.
 * - AnswerVulnerabilityQuestionsOutput - The return type for the answerVulnerabilityQuestions function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const AnswerVulnerabilityQuestionsInputSchema = z.object({
  question: z.string().describe('The question about vulnerability management.'),
});
export type AnswerVulnerabilityQuestionsInput = z.infer<typeof AnswerVulnerabilityQuestionsInputSchema>;

const AnswerVulnerabilityQuestionsOutputSchema = z.object({
  answer: z.string().describe('The answer to the question about vulnerability management.'),
});
export type AnswerVulnerabilityQuestionsOutput = z.infer<typeof AnswerVulnerabilityQuestionsOutputSchema>;

export async function answerVulnerabilityQuestions(input: AnswerVulnerabilityQuestionsInput): Promise<AnswerVulnerabilityQuestionsOutput> {
  return answerVulnerabilityQuestionsFlow(input);
}

const DEFECTDOJO_API_URL = "http://10.243.246.147:8080/";
const DEFECTDOJO_API_KEY = "43973c97c81613ff5755480037e222d2aef30";
const DEFECTDOJO_HEADERS = {
    "Authorization": `Token ${DEFECTDOJO_API_KEY}`,
    "Content-Type": "application/json",
    "Accept": "application/json"
};

const SUBSCRIPTION_KEY = "6285c536d27c4de2856df7975e";
const API_TOKEN = "eZnUG5tSzMXRWbG4zUHQtWGUwbUxDTkg4NERRbnJXWWpFSHhhbFBXQWRiMzdkamw1SjlWOVpDbnpxNGxaY2t5Q0VUVlVMQWpkYmxIRXMzMzVfU2ktYzFORHV6TnM3dnZCaVBNVl9kNUdBQVFzaGRjdGNRVml2VFVIb1NPTExnNkhUZVd2QU10ZTZ5dmNKYUl1dy1zVHA2QS13bGNEQkNqYk5Gc2FRLTl1cmZPVjhCeUt6SHpFYVVRakNta056WldxMWRaMzU1U3hmUEZyd2FEOTMtdFdXdDl6ZXRvRW8teGJOeDlRaHhhT1JmMjZtdkpyT3NHNlJfX29pQ2R5WE05bXRpbktRbUEtZjRjNVFlODBpN3JySldobTViaTdWMUNZdjV0Y2xFLURGOFhLX3gyU2UzcVRuei01QkJjR3lKdUp1V0l6akRqV2VuYVVYZ3dqYXV3Z215b0VkSDVSbkNIdjNIUmZ0a3VReENrdVVGYzBvdjRaYnBsUnFZQ3dsMGpvU05fSll1OU1hRkd1N2Q1WG5Ha3J3Nm96S193SUhCd3hqcjQ1d2JtbkhqYnpKQXE0NUYxaDQ0R2xZSGFmbjFvbFZpTWppMktIU0N4UGJkUGhkb3c1SjMtUWE5ZUJ1OTE3NUpKeWVpeHc5QklMYzZtUS1MVlQydHRqY1FSUHlhellQZjU4X2xJc3JyZjE1a3pJdVJtb0hIcU1ndVlSMlNjRGV6cVhvTjE2YnM0WHEtdXVyTUlXbkZKVHN6WUNibU1ma21uMGg1S2JIeElMaGxxaEhUaFlDXzdSUS";
const API_URL = "https://api.gpt.medtronic.com/models/gpt-4o-2024-11-20";

const getDefectDojoData = ai.defineTool({
  name: 'getDefectDojoData',
  description: 'Retrieves vulnerability data from DefectDojo based on the provided query.',
  inputSchema: z.string().describe('A query to retrieve specific data from DefectDojo.'),
  outputSchema: z.any(),
}, async (query) => {
  try {
    const response = await fetch(`${DEFECTDOJO_API_URL}api/v2/findings/?${query}`, {
      headers: DEFECTDOJO_HEADERS,
    });

    if (!response.ok) {
      throw new Error(`HTTP error! status: ${response.status}`);
    }
    const data = await response.json();
    return data;
  } catch (error) {
    console.error('Error fetching data from DefectDojo:', error);
    return `Error fetching data from DefectDojo: ${error}`;
  }
});

const medtronicGPT = ai.defineTool({
    name: 'medtronicGPT',
    description: 'Answers questions using the Medtronic GPT LLM.',
    inputSchema: z.string().describe('The question to ask Medtronic GPT.'),
    outputSchema: z.string(),
  },
  async (question) => {
    try {
      const response = await fetch(API_URL, {
        method: 'POST',
        headers: {
          'api-version': '3.0',
          'subscription-key': SUBSCRIPTION_KEY,
          'api-token': API_TOKEN,
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ prompt: question }),
      });

      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }

      const data = await response.json();
      return data.choices[0].text;
    } catch (error) {
      console.error('Error calling Medtronic GPT:', error);
      return `Error calling Medtronic GPT: ${error}`;
    }
  }
);

const answerVulnerabilityQuestionsPrompt = ai.definePrompt({
  name: 'answerVulnerabilityQuestionsPrompt',
  input: {schema: AnswerVulnerabilityQuestionsInputSchema},
  output: {schema: AnswerVulnerabilityQuestionsOutputSchema},
  tools: [getDefectDojoData, medtronicGPT],
  prompt: `You are a vulnerability management expert. Use the provided tools to answer the following question about vulnerability management:

Question: {{{question}}}

If the question requires data from DefectDojo, use the 'getDefectDojoData' tool to retrieve the necessary information. If the question is general and doesn't require specific data, use the 'medtronicGPT' tool.

Answer:`, 
});

const answerVulnerabilityQuestionsFlow = ai.defineFlow(
  {
    name: 'answerVulnerabilityQuestionsFlow',
    inputSchema: AnswerVulnerabilityQuestionsInputSchema,
    outputSchema: AnswerVulnerabilityQuestionsOutputSchema,
  },
  async input => {
    const {output} = await answerVulnerabilityQuestionsPrompt(input);
    return output!;
  }
);
